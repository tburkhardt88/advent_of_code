(
sum(head_loc == prev_tail_loc) == 1 &
head_loc[which(head_loc != prev_tail_loc)] - prev_tail_loc[which(head_loc != prev_tail_loc)] == 1
)
prev_tail_loc
prev_tail_loc + c(c(1,1), c(-1,1),c(-1,-1),c(1,-1))
lapply(c(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg})
all(head_loc == prev_tail_loc)|
(
sum(head_loc == prev_tail_loc) == 1 &
head_loc[which(head_loc != prev_tail_loc)] - prev_tail_loc[which(head_loc != prev_tail_loc)] == 1
)|
head_loc %in% c()
c(c(1,1), c(-1,1),c(-1,-1),c(1,-1))
prev_tail_loc + list(c(1,1), c(-1,1),c(-1,-1),c(1,-1))
lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg})
head_loc %in% c(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}))
lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg})
head_loc %in% lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg})
sapply(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}), function(dg){head_loc == dg})
lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg})
sapply(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}), function(dg){dg})
lapply(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}), function(dg){head_loc == dg})
lapply(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)})
sapply(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)})
tail_close = all(head_loc == prev_tail_loc)|
(
sum(head_loc == prev_tail_loc) == 1 &
head_loc[which(head_loc != prev_tail_loc)] - prev_tail_loc[which(head_loc != prev_tail_loc)] == 1
)|
sapply(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)})
tail_close
sapply(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)})
tail_close = all(head_loc == prev_tail_loc)|
(
sum(head_loc == prev_tail_loc) == 1 &
head_loc[which(head_loc != prev_tail_loc)] - prev_tail_loc[which(head_loc != prev_tail_loc)] == 1
)
all(head_loc == prev_tail_loc)
sum(head_loc == prev_tail_loc) == 1 &
head_loc[which(head_loc != prev_tail_loc)] - prev_tail_loc[which(head_loc != prev_tail_loc)] == 1
tail_close = all(head_loc == prev_tail_loc)|
(
sum(head_loc == prev_tail_loc) == 1 &
head_loc[which(head_loc != prev_tail_loc)] - prev_tail_loc[which(head_loc != prev_tail_loc)] == 1
)|
any(sapply(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)}))
tail_close
head_loc <- c(1,1)
all(head_loc == prev_tail_loc)
sum(head_loc == prev_tail_loc) == 1 &
head_loc[which(head_loc != prev_tail_loc)] - prev_tail_loc[which(head_loc != prev_tail_loc)] == 1
(
sum(head_loc == prev_tail_loc) == 1 &
head_loc[which(head_loc != prev_tail_loc)] - prev_tail_loc[which(head_loc != prev_tail_loc)] == 1
)
sum(head_loc == prev_tail_loc) == 1
head_loc[which(head_loc != prev_tail_loc)] - prev_tail_loc[which(head_loc != prev_tail_loc)] == 1
tail_close = all(head_loc == prev_tail_loc)|
(
sum(head_loc == prev_tail_loc) == 1 &
head_loc[which(head_loc != prev_tail_loc)] - prev_tail_loc[which(head_loc != prev_tail_loc)] == 1
)|
any(sapply(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)}))
any(sapply(lapply(list(c(0,1), c(-1,0),c(0,-1),c(1,0)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)}))
any(sapply(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)}))
head_loc <- move_head[[mv_vector[i]]](locations$Hx[i], locations$Hy[i])
prev_tail_loc <- c(locations$Tx[i], locations$Ty[i])
any(sapply(lapply(list(c(0,1), c(-1,0),c(0,-1),c(1,0)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)}))
all(head_loc == prev_tail_loc)
any(sapply(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)}))
head(locations)
i =1
locations <- data.frame(
step = 0,
Tx = 0, Ty =0,
Hx = 0, Hy = 0
)
move_head <- list(
U = function(rx, ry){c(rx, ry + 1)},
L = function(rx, ry){c(rx - 1, ry)},
D = function(rx, ry){c(rx, ry - 1)},
R = function(rx, ry){c(rx + 1, ry)}
)
for(i in 1:length(mv_vector)){
head_loc <- move_head[[mv_vector[i]]](locations$Hx[i], locations$Hy[i])
prev_tail_loc <- c(locations$Tx[i], locations$Ty[i])
tail_close = all(head_loc == prev_tail_loc) |
any(sapply(lapply(list(c(0,1), c(-1,0),c(0,-1),c(1,0)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)})) |
any(sapply(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)}))
if(tail_close){
tail_loc = prev_tail_loc
} else {
}
new_row <- data.frame(
step = i,
Tx = tail_loc[1],
Ty = tail_loc[2],
Hx = head_loc[1],
Hy = head_loc[2]
)
locations <- bind_rows(locations, new_row)
}
locations
head(locations)
i = 2
head_loc <- move_head[[mv_vector[i]]](locations$Hx[i], locations$Hy[i])
prev_tail_loc <- c(locations$Tx[i], locations$Ty[i])
tail_close = all(head_loc == prev_tail_loc) |
any(sapply(lapply(list(c(0,1), c(-1,0),c(0,-1),c(1,0)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)})) |
any(sapply(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)}))
tail_close
head_loc
prev_tail_loc
head(locations, 20)
i = 11
head_loc <- move_head[[mv_vector[i]]](locations$Hx[i], locations$Hy[i])
prev_tail_loc <- c(locations$Tx[i], locations$Ty[i])
head_loc
prev_tail_loc
tail_close = all(head_loc == prev_tail_loc) |
any(sapply(lapply(list(c(0,1), c(-1,0),c(0,-1),c(1,0)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)})) |
any(sapply(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)}))
tail_close
dif(head_loc, prev_tail_loc)
diff(head_loc, prev_tail_loc)
head_loc - prev_tail_loc
which(abs(head_loc - prev_tail_loc) > 1)
prev_tail_loc[which(abs(head_loc - prev_tail_loc) > 1)]
biggest_change, c(1,2)
biggest_change <- which(abs(head_loc - prev_tail_loc) > 1)
setdiff(biggest_change, c(1,2)
)
abs(head_loc - prev_tail_loc) > 1
differences <- head_loc - prev_tail_loc
tail_close
differences <- head_loc - prev_tail_loc
biggest_change <- which(abs(differences) > 1)
sign(differences[biggest_change])
sign(-2)
differences <- head_loc - prev_tail_loc
biggest_change <- which(abs(differences) > 1)
prev_tail[biggest_change] <- prev_tail_loc[biggest_change] + 1 * sign(differences[biggest_change])
prev_tail_loc[biggest_change] <- prev_tail_loc[biggest_change] + 1 * sign(differences[biggest_change])
prev_tail_loc
all(abs(differences) > 0)
alt <- setdiff(biggest_change,c(1,2))
alt
biggest_change
setdiff(biggest_change,c(1,2))
etdiff(biggest_change,1:2)
setdiff(biggest_change,1:2)
biggest_change
alt <- setdiff(1:2, biggest_change)
prev_tail_loc[alt] <- prev_tail_loc[alt] + 1 * sign(differences[alt])
locations <- data.frame(
step = 0,
Tx = 0, Ty =0,
Hx = 0, Hy = 0
)
move_head <- list(
U = function(rx, ry){c(rx, ry + 1)},
L = function(rx, ry){c(rx - 1, ry)},
D = function(rx, ry){c(rx, ry - 1)},
R = function(rx, ry){c(rx + 1, ry)}
)
if(tail_close){
tail_loc = prev_tail_loc
} else {
tail_loc <- c(0,0)
differences <- head_loc - prev_tail_loc
biggest_change <- which(abs(differences) > 1)
tail_loc[biggest_change] <- prev_tail_loc[biggest_change] + 1 * sign(differences[biggest_change])
alt <- setdiff(1:2, biggest_change)
if(all(abs(differences) > 0)){
tail_loc[alt] <- prev_tail_loc[alt] + 1 * sign(differences[alt])
} else {
tail[alt] <- prev_tail_loc[alt]
}
}
all(abs(differences) > 0)
if(tail_close){
tail_loc = prev_tail_loc
} else {
tail_loc <- c(0,0)
differences <- head_loc - prev_tail_loc
biggest_change <- which(abs(differences) > 1)
tail_loc[biggest_change] <- prev_tail_loc[biggest_change] + 1 * sign(differences[biggest_change])
alt <- setdiff(1:2, biggest_change)
if(all(abs(differences) > 0)){
tail_loc[alt] <- prev_tail_loc[alt] + 1 * sign(differences[alt])
} else {
tail_loc[alt] <- prev_tail_loc[alt]
}
}
moves <- read.table('input.txt')
names(moves) <- c('direction', 'steps')
mv_vector <- character()
for(i in 1:nrow(moves)){mv_vector <- c(mv_vector, rep(moves$direction[i], moves$steps[i]))}
rm(moves)
locations <- data.frame(
step = 0,
Tx = 0, Ty =0,
Hx = 0, Hy = 0
)
move_head <- list(
U = function(rx, ry){c(rx, ry + 1)},
L = function(rx, ry){c(rx - 1, ry)},
D = function(rx, ry){c(rx, ry - 1)},
R = function(rx, ry){c(rx + 1, ry)}
)
for(i in 1:length(mv_vector)){
head_loc <- move_head[[mv_vector[i]]](locations$Hx[i], locations$Hy[i])
prev_tail_loc <- c(locations$Tx[i], locations$Ty[i])
tail_close = all(head_loc == prev_tail_loc) |
any(sapply(lapply(list(c(0,1), c(-1,0),c(0,-1),c(1,0)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)})) |
any(sapply(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)}))
if(tail_close){
tail_loc = prev_tail_loc
} else {
tail_loc <- c(0,0)
differences <- head_loc - prev_tail_loc
biggest_change <- which(abs(differences) > 1)
tail_loc[biggest_change] <- prev_tail_loc[biggest_change] + 1 * sign(differences[biggest_change])
alt <- setdiff(1:2, biggest_change)
if(all(abs(differences) > 0)){
tail_loc[alt] <- prev_tail_loc[alt] + 1 * sign(differences[alt])
} else {
tail_loc[alt] <- prev_tail_loc[alt]
}
}
new_row <- data.frame(
step = i,
Tx = tail_loc[1],
Ty = tail_loc[2],
Hx = head_loc[1],
Hy = head_loc[2]
)
locations <- bind_rows(locations, new_row)
}
head(locations, 20)
tail(locations)
head(paste0(locations$Tx,',',locations$Ty))
length(unique(paste0(locations$Tx,',',locations$Ty)))
head(unique(paste0(locations$Tx,',',locations$Ty)))
locations
library(tidyverse)
locations <- as_tibble(locations)
locations
locations %>%
pivot_longer(2:last_col())
locations %>%
pivot_longer(2:last_col()) %>%
separate(name, into('type','coord'), sep = '')
locations %>%
pivot_longer(2:last_col()) %>%
separate(name, into = c('type','coord'), sep = '')
locations %>%
pivot_longer(2:last_col()) %>%
mutate(
ht = str_extract(name, '^.'),
coord = str_extract(name, '.$')
)
locations %>%
pivot_longer(2:last_col()) %>%
mutate(
ht = str_extract(name, '^.'),
coord = str_extract(name, '.$')
) %>% select(-name)
locations %>%
pivot_longer(2:last_col()) %>%
mutate(
ht = str_extract(name, '^.'),
coord = str_extract(name, '.$')
) %>% select(-name) %>%
pivot_wider(names_from = coord, values_from = value)
df <- locations %>%
pivot_longer(2:last_col()) %>%
mutate(
ht = str_extract(name, '^.'),
coord = str_extract(name, '.$')
) %>% select(-name) %>%
pivot_wider(names_from = coord, values_from = value)
library(gganimate)
install.packages('gganimate')
library(gganimate)
install.packages("gifski")
install.packages('av')
library(tidyverse)
library(gganimate)
locations <- as_tibble(locations)
locations
df
?transition_states
?ease_aes
ggplot(filter(df, step == 0), aes(x, y, colour = ht)) +
geom_point() +
geom_line()
ggplot(filter(df, step == 1), aes(x, y, colour = ht)) +
geom_point() +
geom_line()
ggplot(filter(df, step == 1), aes(x, y)) +
geom_point(aes(colour = ht)) +
geom_line()
anim <- ggplot(df, aes(x, y)) +
geom_point(aes(colour = ht)) +
geom_line() +
# Here comes the gganimate code
transition_states(
step,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
animate(anim)
anim <- ggplot(fitler(step < 100), aes(x, y)) +
geom_point(aes(colour = ht)) +
geom_line() +
# Here comes the gganimate code
transition_states(
step,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
anim <- ggplot(filter(step < 100), aes(x, y)) +
geom_point(aes(colour = ht)) +
geom_line() +
# Here comes the gganimate code
transition_states(
step,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
anim <- ggplot(filter(df, step < 100), aes(x, y)) +
geom_point(aes(colour = ht)) +
geom_line() +
# Here comes the gganimate code
transition_states(
step,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
animate(anim)
install.packages('transformer')
remotes::install_github('thomasp85/transformr')
animate(anim)
devtools::install_github("thomasp85/transformr")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("thomasp85/transformr")
install.packages('cli')
install.packages("cli")
devtools::install_github("thomasp85/transformr")
anim <- ggplot(filter(df, step < 100), aes(x, y)) +
geom_point(aes(colour = ht)) +
# geom_line() +
# Here comes the gganimate code
transition_states(
step,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
animate(anim)
library(tidyverse)
library(gganimate)
anim <- ggplot(filter(df, step < 100), aes(x, y)) +
geom_point(aes(colour = ht)) +
# geom_line() +
# Here comes the gganimate code
transition_states(
step,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
animate(anim)
anim <- ggplot(filter(df, step < 100), aes(x, y)) +
geom_point(aes(colour = ht)) +
geom_line() +
transition_states(
step,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
anim
devtools::install_github("thomasp85/transformr")
install.packages("cli")
install.packages("cli")
devtools::install_github("thomasp85/transformr")
sessionInfo()
library(cli)
sessionInfo()
install.packages("cli")
install.packages("cli")
library(cli)
sessionInfo()
moves <- read.table('input.txt')
names(moves) <- c('direction', 'steps')
mv_vector <- character()
for(i in 1:nrow(moves)){mv_vector <- c(mv_vector, rep(moves$direction[i], moves$steps[i]))}
rm(moves)
locations <- data.frame(
step = 0,
Tx = 0, Ty =0,
Hx = 0, Hy = 0
)
move_head <- list(
U = function(rx, ry){c(rx, ry + 1)},
L = function(rx, ry){c(rx - 1, ry)},
D = function(rx, ry){c(rx, ry - 1)},
R = function(rx, ry){c(rx + 1, ry)}
)
for(i in 1:length(mv_vector)){
head_loc <- move_head[[mv_vector[i]]](locations$Hx[i], locations$Hy[i])
prev_tail_loc <- c(locations$Tx[i], locations$Ty[i])
tail_close = all(head_loc == prev_tail_loc) |
any(sapply(lapply(list(c(0,1), c(-1,0),c(0,-1),c(1,0)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)})) |
any(sapply(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)}))
if(tail_close){
tail_loc = prev_tail_loc
} else {
tail_loc <- c(0,0)
differences <- head_loc - prev_tail_loc
biggest_change <- which(abs(differences) > 1)
tail_loc[biggest_change] <- prev_tail_loc[biggest_change] + 1 * sign(differences[biggest_change])
alt <- setdiff(1:2, biggest_change)
if(all(abs(differences) > 0)){
tail_loc[alt] <- prev_tail_loc[alt] + 1 * sign(differences[alt])
} else {
tail_loc[alt] <- prev_tail_loc[alt]
}
}
new_row <- data.frame(
step = i,
Tx = tail_loc[1],
Ty = tail_loc[2],
Hx = head_loc[1],
Hy = head_loc[2]
)
locations <- bind_rows(locations, new_row)
}
moves <- read.table('input.txt')
names(moves) <- c('direction', 'steps')
mv_vector <- character()
for(i in 1:nrow(moves)){mv_vector <- c(mv_vector, rep(moves$direction[i], moves$steps[i]))}
rm(moves)
locations <- data.frame(
step = 0,
Tx = 0, Ty =0,
Hx = 0, Hy = 0
)
move_head <- list(
U = function(rx, ry){c(rx, ry + 1)},
L = function(rx, ry){c(rx - 1, ry)},
D = function(rx, ry){c(rx, ry - 1)},
R = function(rx, ry){c(rx + 1, ry)}
)
for(i in 1:length(mv_vector)){
head_loc <- move_head[[mv_vector[i]]](locations$Hx[i], locations$Hy[i])
prev_tail_loc <- c(locations$Tx[i], locations$Ty[i])
tail_close = all(head_loc == prev_tail_loc) |
any(sapply(lapply(list(c(0,1), c(-1,0),c(0,-1),c(1,0)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)})) |
any(sapply(lapply(list(c(1,1), c(-1,1),c(-1,-1),c(1,-1)), function(dg){prev_tail_loc + dg}), function(dg){all(head_loc == dg)}))
if(tail_close){
tail_loc = prev_tail_loc
} else {
tail_loc <- c(0,0)
differences <- head_loc - prev_tail_loc
biggest_change <- which(abs(differences) > 1)
tail_loc[biggest_change] <- prev_tail_loc[biggest_change] + 1 * sign(differences[biggest_change])
alt <- setdiff(1:2, biggest_change)
if(all(abs(differences) > 0)){
tail_loc[alt] <- prev_tail_loc[alt] + 1 * sign(differences[alt])
} else {
tail_loc[alt] <- prev_tail_loc[alt]
}
}
new_row <- data.frame(
step = i,
Tx = tail_loc[1],
Ty = tail_loc[2],
Hx = head_loc[1],
Hy = head_loc[2]
)
locations <- rbind(locations, new_row)
}
length(unique(paste0(locations$Tx,',',locations$Ty)))
head(locations)
install.packages("cli")
install.packages("cli")
library(cli)
sessionInfo()
